#include "MeMCore.h"
#include <SoftwareSerial.h>


#define TURNDURATION 2.9156
#define left -90
#define right 90
#define around 180
#define REDLEDSTATE 1
#define GREENLEDSTATE 2
#define BLUELEDSTATE 3
#define NOLEDSTATE 0
#define oneduration 600



MeDCMotor motorleft(M1);
MeDCMotor motorright(M2);
MeLineFollower linesensor(PORT_1);  //D11, D12
MeUltrasonicSensor rightsensor(PORT_2);  //D09, D10
//MeInfraredReceiver leftsensor(PORT_3);  //A2, A3
//MeColorSensor coloursensor(PORT_4);  //A0, A1    (A1 & A2 feed the 2 to 4 decoder, A0 & A3 receive inputs from the sensors respectively)
MeBuzzer buzzer



  int rightdistance;
  int newrightdistance;
  int leftdistance = leftsensor.read();  
  int linesensor = linesensor.readSensors();



/**
 * structures:
 * 
 * colourdecode
 * turn
 * irsensor
 * untrasonic
 * linesensor
 * music
 * 
 * setup:
 * pinmodes & everyting
 * 
 * loop:
 * motorruns
 * call irsensor
 * call untrasonic
 * call linesensor
 * call colourdecode
 * call turn or music
 * end of loop
 */










int ledstate = NOLEDSTATE;

void lightled() {
  if (ledstate == REDLEDSTATE) {
    digitalWrite(A1, HIGH);
    digitalWrite(A2, LOW);
    Serial.println(" R");
    return;    
  }
  if (ledstate == BLUELEDSTATE) {
    digitalWrite(A1, LOW);
    digitalWrite(A2, HIGH);
    Serial.println(" G");  
    return;  
  } 
  if (ledstate == GREENLEDSTATE) {
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    Serial.println(" B");    
    return;
  }
  digitalWrite(A1, LOW);
  digitalWrite(A2, LOW);   
 
}








int colourdecode(int redval, int greenval, int blueval)
{
  if(redval <= ___rgbrange___)     //colour 1
  {
    return __degree__;
  }
}


void turn(int degree)
{
  if(degree < 0)
  { 
    degree *= -1;
    motorleft.run(255);
    motorright.run(255);
  }
  else
  {
    motorleft.run(-255);
    motorright.run(-255);
  }
  delay(TURNDURATION * degree);
}



int leftsensor()
{
  return ultrasonic.distancecm();
}



int rightsensor()
{
  
}



void steer(int n)             //-ve n to steer left, +ve n to steer right
{
  if(n < 0)
  {
    motorleft.run(-240 - n);  //steer left
    motorright.run(255);
  }
  else
  {
    motorleft.run(-240);
    motorright.run(255 - n);  //steer right
  }
}



void onegridforward()
{
  motorleft.run(vleft);
  motorright.run(vright);
  delay(oneduration);
  motorleft.stop();
  motorleft.stop();
  delay(100);
}



bool linesensor()
{
  switch(linesensor)
  {
    case S1_OUT_S2_OUT: Serial.println("Sensor 1 and 2 are outside of black line");
    motorleft.run(-240);
    motorright.run(255);
    return false;
    case S1_IN_S2_OUT: Serial.println("Sensor 1 is inside of black line");
    motorleft.run(0);
    motorright.run(50);
    delay(20);
    return true;
    case S1_OUT_S2_IN: Serial.println("Sensor 2 is inside of black line");
    motorleft.run(-50);
    motorright.run(0);
    delay(20);
    return true;
    case S1_IN_S2_IN: Serial.println("Sensor 1 and 2 are inside of black line");
    motorleft.run(0);
    motorright.run(0);
    return true;
  }
}


void music()
{
  for(int i = 1; i <= 1; i += 1)
  {
    int freq = 600;
    while(freq < 800)
    {
      buzzer.tone(freq, 10);
      freq += 1;
    }
    delay(20);
    while(freq > 600)
    {
      buzzer.tone(freq, 10);
      freq -= 1;
    }
    delay(20);
  }
  buzzer.noTone();
}






void setup()
{
pinMode(COLOUR_IN, INPUT);  //colour
pinMode(IR_IN, INPUT);  //left
pinMode(24X1, OUTPUT); //2-4 x1
pinMode(24X2, OUTPUT); //2-4 x2
  
  Serial.begin(9600);
  motorleft.run(vleft);
  motorright.run(vright);
  delay(300);
  rightdistance = ultraSensor.distanceCm();
  delay(10);
}











void loop()
{ 
  newrightdistance = rightsensor();
  if(newrightdistance < 6)
  {
    steer(-80);
    delay(100);
  }
  else if(newrightdistance > 10)
  {
    steer(80);
    delay(100);
  }
  else
  {
    steer(newrightdistance - rightdistance);
  }
  rightdistance = newrightdistance;
  leftdistance = leftsensor();
  if(linesensor())
  {
    int angle = colourdecoder();
  }
  if(angle == -2)
  {
    turn(left);
    straightonegrid();
    turn(left);
  }
  else if(angle == 2)
  {
    turn(right);
    straightonegrid();
    turn(right);
  }
  else if(angle == 0)
  {
    music();
  }
  else
  {
    turn(angle);
  }
  
  
  
  
  
  delay(100);

*/


//changed val to respective colour readings to feed into colour decoder

int val = analogRead(A0);
Serial.println(val);

 delay(100);
ledstate = REDLEDSTATE;
lightled();
 delay(50);
int redval = analogRead(A0);
Serial.println(val);

ledstate = BLUELEDSTATE;
lightled();
 delay(50);
int blueval = analogRead(A0);
Serial.println(val);
 ledstate = GREENLEDSTATE;
lightled();
 delay(50);
int greenval = analogRead(A0);
Serial.println(val);
 ledstate = NOLEDSTATE;
lightled();
 delay(500); 

turn(colourdecode(redval, greenval, blueval);



 
}
