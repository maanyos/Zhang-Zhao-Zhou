#include "MeMCore.h"
#include <SoftwareSerial.h>


#define TURNDURATION 2.9156
#define left -90
#define right 90
#define around 180




MeDCMotor motorleft(M1);
MeDCMotor motorright(M2);
MeLineFollower linesensor(PORT_1);  //D11, D12
MeUltrasonicSensor rightsensor(PORT_2);  //D09, D10
MeInfraredReceiver leftsensor(PORT_3);  //A2, A3
MeColorSensor coloursensor(PORT_4);  //A0, A1





/** leftsensor
 * void loop()
{
  uint8_t ReceiverCode;
  uint8_t buttonState;
  static uint8_t PrebuttonState = 0;

  buttonState = infraredReceiverDecode.buttonState();
  if(PrebuttonState != buttonState)
  {
    PrebuttonState = buttonState;
    Serial.print("buttonState 0x");
    Serial.println(buttonState);
  }
  if(infraredReceiverDecode.available())
  {
    ReceiverCode = infraredReceiverDecode.read();
    switch(ReceiverCode)
    {
       case IR_BUTTON_A: Serial.println("Press A."); break;
       case IR_BUTTON_B: Serial.println("Press B."); break;
       case IR_BUTTON_C: Serial.println("Press C."); break;
       case IR_BUTTON_D: Serial.println("Press D."); break;
       case IR_BUTTON_E: Serial.println("Press E."); break;
       case IR_BUTTON_F: Serial.println("Press F."); break;
       case IR_BUTTON_SETTING: Serial.println("Press Setting."); break;
       case IR_BUTTON_UP: Serial.println("Press Up."); break;
       case IR_BUTTON_DOWN: Serial.println("Press Down."); break;
       case IR_BUTTON_LEFT: Serial.println("Press Left."); break;
       case IR_BUTTON_RIGHT: Serial.println("Press Right."); break;
       case IR_BUTTON_0: Serial.println("Press 0."); break;
       case IR_BUTTON_1: Serial.println("Press 1."); break;
       case IR_BUTTON_2: Serial.println("Press 2."); break;
       case IR_BUTTON_3: Serial.println("Press 3."); break;
       case IR_BUTTON_4: Serial.println("Press 4."); break;
       case IR_BUTTON_5: Serial.println("Press 5."); break;
       case IR_BUTTON_6: Serial.println("Press 6."); break;
       case IR_BUTTON_7: Serial.println("Press 7."); break;
       case IR_BUTTON_8: Serial.println("Press 8."); break;
       case IR_BUTTON_9: Serial.println("Press 9."); break;
       default: break;
    }
  }
}
 */



/** rightsensor
  void loop()
{
  Serial.print("Distance : ");
  Serial.print(ultraSensor.distanceCm() );
  Serial.println(" cm");
  delay(100); /* the minimal measure interval is 100 milliseconds */



void turn(int degree)
{
  if(degree < 0)
  { 
    degree *= -1;
    motorleft.run(255);
    motorright.run(255);
  }
  else
  {
    motorleft.run(-255);
    motorright.run(-255);
  }
  delay(TURNDURATION * degree);
  motorleft.run(0);
  motorright.run(0);
}


void setup()
{
  


  
  Serial.begin(9600);
delay(1000);
turn(-90);
  
}

void loop()
{
 // motorleft.run(-240);
  //motorright.run(255);



  
int sensorState = linesensor.readSensors();
  switch(sensorState)
  {
    case S1_IN_S2_IN: Serial.println("Sensor 1 and 2 are inside of black line");
    motorleft.run(0);
    motorright.run(0);
    break;
    case S1_IN_S2_OUT: Serial.println("Sensor 2 is outside of black line");
    motorleft.run(50);
    motorright.run(50);
    break;
    case S1_OUT_S2_IN: Serial.println("Sensor 1 is outside of black line");
    motorleft.run(-50);
    motorright.run(-50);
    break;
    case S1_OUT_S2_OUT: Serial.println("Sensor 1 and 2 are outside of black line");
    motorleft.run(-63);
    motorright.run(63);
    break;
    default: break;
  }
 delay(10);
}
